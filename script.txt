My name is Jake Richard, and I will be showcasing the project I worked on with my teammates Zander Bournand and Stone Blumauer.

CryptoGraph, the name of our project, is a program to be used for retrieving and displaying historic cryptocurrency data. Backed by a publicly-available API, the program is capable of requesting information and conveying that information to the user in a meaningful way.

(launch program)

To get started, you first input your time interval of interest with two interactive calendars. In order to be valid, the time span's length must be greater than one day, it must not include future dates, and the end date must be after the start date. The program will recognize violations of these acceptable inputs.

(demonstrate each case of unacceptable input)

Now, I'll select a valid time span and move on to the program's next input field.

(select valid time span-- 9/26/16 - 10/21/20)

The program now prompts you to choose a data structure to load the cryptocurrency data into. The user can select either a map or a tree. The map is implemented as a hash table, and the tree is a BPlusTree. A BPlusTree specifically was used because it was important to be able to access every data value in order to place them onto a chart. The list structure at the leaves of a BPlusTree provided a straightforward way of doing this. 

I will select the Map structure first.

(select Map)

Now, the user is prompted to input the symbols of up to three different cryptocurrencies. These can be any currencies that the Nomics API is currently collecting data for. The program also includes a link so users may look up cryptocurrency symbols if they need. The program can recognize basic errors in symbol names. For example, if I input lower case symbols, I am given an error. 

(input lowercase currency names -- btc, eth, bch)

The program prompts you to input valid currency names instead. If I capitalize these symbols (capitalize them) it will work. 

So, now that I've input my dates, data structures, and currencies the program will request the relevant data from the API, load that data into the selected structure, and then use that structure to display it to the screen. 

(press OK)

As you can see, the chart displays each crypto's data in a single chart that spans the time interval of interest. This chart was created using a python module called matplotlib. You can zoom in on this chart (zoom), trace x and y values -- these are displayed in the bottom right, you can move around the axes (move around), undo view changes (undo), redo view changes (redo), and reset the view (home). The user can also save the graph's current view as an image with this button (press save -- don't save).

The chart also displays the time it took to construct the graph, and the lowest, average, and highest price values of each displayed currency along with the times it took to calculate these values, given in nanoseconds. These provide a point of reference for comparing the performances of our data structures.

If I now press this reset button (press it). The program will take me back to the beginning prompt for date input. I will input the same time span (input 9-26/16 - 10/21/20), but select the Tree structure this time (select Tree). I will also input the same cryptocurrencies, but I will purposefully include an error in the last symbol to demonstrate the program's reaction to a nonexistent symbol. 

(input BTC, ETH, BCHZ, press OK)

So, the program gives an error message telling the user that one or more of their currencies was not found and draws only the two valid currencies to the chart and calculates statistics for them. The user is able to reset the program as many times as they want to request as much data as they need (press reset).

That concludes the program's functionality. It's a fairly lightweight and effective way of viewing and comparing the long-term patterns of various cryptocurrencies. We think these patterns will become increasingly important as the the viability of cryptocurrencies grows more long term.

(end presentation)

